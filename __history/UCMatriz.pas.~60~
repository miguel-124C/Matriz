unit UCMatriz;

interface
Uses SysUtils, Math;
const
     Nf = 128;
     Nc = 128;
Type

    Matriz = Class
      Private
             NroFilas,
             NroColumnas : Word;
             Celdas : Array[1..Nf,1..Nc] Of Real;
      Public
            Procedure Redimensionar(NF,NC:Word);
            Function Filas : Word;
            Function Columnas : Word;
            Function ObtElement(F,C:Word):Real;
            Procedure ModElement(F,C:Word; E:Real);
            Procedure AddFila;
            Procedure AddColumna;
            Procedure InsFila(F:Word);
            Procedure InsColumna(C:Word);
            Procedure DelFila(F:Word);
            Procedure DelColumna(C:Word);
            Function SumarElementos:Real;
            Function BuscElement(E:Real): Boolean;
            Procedure CargarMatriz (I,J: WORD; E: Real);
            Procedure CargarMtriz1 ;
            Procedure MatrizDeFibonacci;

            Function CountDig(E: Real):Byte;

            //-------------------------
            Procedure MatrizExamen;  //////FACIL PERO NO PUDE HACERLO


            Procedure MatrizenRedondomas1;  // redondea toda la matriz ni bien termina
                                            // sigue con el numero sumado 1

            procedure delColRepeat;
            function verificarColRepeat( nColActual, nColVerificar: word ): boolean;


    End;

implementation

{ Matriz }

procedure Matriz.Redimensionar(NF, NC: Word);
begin
     NroFilas:=NF;
     NroColumnas:=NC;
end;

//----------------------------------------------------------------------------------------------------

function Matriz.Filas: Word;
begin
     Result:=NroFilas;
end;

//----------------------------------------------------------------------------------------------------

function Matriz.Columnas: Word;
begin
     Result:=NroColumnas;
end;

//----------------------------------------------------------------------------------------------------

function Matriz.ObtElement(F, C: Word): Real;
begin
     if (F>0)And(F<=NroFilas) And(C>0)And(C<=NroColumnas) then
         Result:=Celdas[F,C]
     Else raise Exception.Create('Posicion Invalida');
end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.ModElement(F, C: Word; E: Real);
begin
     if (F>0)And(F<=NroFilas) And(C>0)And(C<=NroColumnas) then
         Celdas[F,C]:=E
     Else raise Exception.Create('Posicion Invalida');
end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.AddFila;
begin
     Inc(NroFilas);
end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.AddColumna;
begin
     Inc(NroColumnas);

end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.InsFila(F: Word);
var
  I: Word;
  J: Integer;
begin
      if (F>0)And(F<=NroFilas) then
     Begin
          Inc(NroFilas);
          for I := NroFilas downto F+1 do
             for J := 1 to NroColumnas do
                 Celdas[I,J]:=Celdas[I-1,J];
     End
     Else raise Exception.Create('Columna Invalida');
end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.InsColumna(C: Word);
var
  I: Word;
  J: Integer;
begin
      if (C>0)And(C<=NroColumnas) then
     Begin
          Inc(NroColumnas);
          for J := NroColumnas downto C+1 do
             for I := 1 to NroFilas do
                 Celdas[I,J]:=Celdas[I,J-1];
     End
     Else raise Exception.Create('Columna Invalida');

end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.DelFila(F: Word);
var
  I: Word;
  j: Integer;
begin
     if (F>0)And(F<=NroFilas) then
     Begin
      for I := F to NroFilas-1 do
        for j := 1 to NroColumnas do
          Celdas[i,j]:=Celdas[i+1,j];
      Dec(NroFilas);
     End
     Else raise Exception.Create('Fila Invalida');
end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.DelColumna(C: Word);
var
  I: Word;
  j: Integer;
begin
     if (C>0)And(C<=NroColumnas) then
     Begin
      for J := C to NroColumnas-1 do
        for I := 1 to NroFilas do
          Celdas[i,j]:=Celdas[i,j+1];
      Dec(NroColumnas);
     End
     Else raise Exception.Create('Columna Invalida');
end;

//----------------------------------------------------------------------------------------------------

function Matriz.SumarElementos: Real;       //Suman todos
var
  I,J: Integer;
  Suma : Real;
begin
    Suma:=0;
     for I := 1 to NroFilas do
        for J := 1 to NroColumnas do
            Suma:=Suma+Celdas[i,j];
     Result:=Suma;
end;

//----------------------------------------------------------------------------------------------------

function Matriz.BuscElement(E: Real): Boolean;
Var I, J:Word; B: Boolean;
begin
  i:=1;
    while (i<=filas) and (B=false) do
    begin
      j:=1;
      while (j<=columnas) and (B=false) do
      begin
        if Celdas[i,j]=e then
        begin
          B:=true;
        end;
        j:=j+1;
      end;
      i:=i+1;
    end;
    result:=B;

end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.CargarMatriz(I, J: WORD; E:Real);              // Ni idea
Var T: Real;
begin
    T:=0;
    for I := NroFilas Downto 1 do
      Begin
        for J := NroColumnas Downto 1 do
        Begin
            Celdas[I,J]:=T;
        End;

      End;
end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.CargarMtriz1;
Var I, J:Word;  E:Real;
begin
    E:=1;
    for J :=1  to NroColumnas do
    Begin
        for I := 1 to NroFilas do
        Begin
          Celdas[i, j]:=E;
          E:=E+1;
        End;
    End;
end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.MatrizDeFibonacci;
Var E, K, a, b: Integer;  I, J:Word;
begin
  K:=-1; J:= NroColumnas;
  A:=0; B:=1;
      for I := NroFilas Downto 1 do
        Begin
          while (J<=NroColumnas) And (J>0) do
          Begin
              E:=A+B;
              A:=B;   B:=E;
              Celdas[I, J]:=E;
              J:=J+K;
          End;
          K:= K*(-1);
          J:=J+K;
        End;

end;



//----------------------------------------------------------------------------------------------------

                                //Practicando

function Matriz.CountDig(E: Real): Byte;
begin
      Result:= Trunc(Log10 (E)) +1;
end;

//----------------------------------------------------------------------------------------------------



procedure Matriz.MatrizExamen;                 //EXAMEN QUE NO PUDE HACER. Y ERA MAS SIMPLE
Var I, J, R, c, U: WORD;       E:byte;         //ES UNA SERIE
begin
        I:=1; J:=NROFILAS;  E:=1;  C:=J;
        Celdas[I, J]:=E;
        while (J>I) AND (I<NROFILAS) do
        Begin
              Celdas[I, J]:=E;
              IF J=NROFILAS then
              BEGIN
                I:=1;
                DEC(C);
                J:=C;
              END ELSE
              BEGIN
                INC(J);
                INC(I);
              END;
              INC(E);
        End;
        I:=NROFILAS; J:=1;  E:=1;  C:=J;
        Celdas[I, J]:=E;
        while (J<=NROCOLUMNAS-1) AND (I>=1) do
        Begin
              Celdas[I, J]:=E;
              IF J=1 then
              BEGIN
                I:=NROFILAS;
                INC(C);
                J:=C;
              END ELSE
              BEGIN
                DEC(J);
                DEC(I);
              END;
              INC(E);
        End;

end;

//----------------------------------------------------------------------------------------------------

procedure Matriz.MatrizenRedondomas1;
Var
e, C:Integer;   I, J, JFi, IFi, Ji,Ii: WORD;
begin
    e:=1; I:=1; J:=1;   JFi:=NroColumnas; IFi:=NroFilas; Ji:=1; Ii:=1; C:=0;
    while (C< NroColumnas*NroFilas)do
    Begin
      While J <=Jfi do
        Begin
          Celdas[I,J]:=E;
          Inc(C);
          Inc(J);
        End;
        Dec(J);
        Inc(I);
      While I <=Ifi do
        Begin
          Celdas[I,J]:=E;
          Inc(C);
          Inc(I);
        End;
        Dec(I);
        Dec(J);
      While J >= Ji do
        Begin
          Celdas[I,J]:=E;
          Inc(C);
          Dec(J);
        End;
        Inc(Ii);
        Inc(J);
        Dec(I);
      While I >= Ii do
        Begin
          Celdas[I,J]:=E;
          Inc(C);
          Dec(I);
        End;
        Inc(I);
        Inc(J);
        Dec(Jfi);
        Dec(Ifi);
        Inc(Ji);
        Inc(E);
    End;


end;

//------------------------------------------------------------------------------------------------------------------
function Matriz.verificarColRepeat(nColActual, nColVerificar: word ): Boolean;
var i, j, count: integer;
begin
    count := 0;
     for J := 1 to NroColumnas - 1 do
      for I := 1 to NroFilas do
      begin
          if Celdas[i,nColActual] = Celdas[i,nColVerificar] then
          begin
            inc(count);
          end;
      end;

    result:= count = NroFilas;
end;

//------------------------------------------------------------------------------------------------------------------
procedure Matriz.delColRepeat;
var i, j, count: word;
begin
    count := 0;
     for J := 1 to NroColumnas - 1 do
     begin
        i := j + 1;
        while i < NroColumnas do
        begin
          if verificarColRepeat(J, I) = true then
          begin
            DelColumna(I);
          end;
        end;
     end;

end;

end.
